import pandas as pd
from presidio_analyzer import AnalyzerEngine
from tqdm.auto import tqdm

# Make sure tqdm auto works in your environment
tqdm.pandas()

# Set batch size
batch_size = 100

# Identify character/text columns, excluding 'cid'
char_cols = df.select_dtypes(include='object').columns
char_cols = [col for col in char_cols if col.lower() != "cid"]

# Initialize findings list
findings = []

# Calculate total number of batches
num_batches = (len(df) + batch_size - 1) // batch_size

# Outer loop with batch-level progress
for batch_num in tqdm(range(num_batches), desc="ðŸ”„ Overall batches", ncols=100):
    start_idx = batch_num * batch_size
    end_idx = min((batch_num + 1) * batch_size, len(df))
    batch = df.iloc[start_idx:end_idx]

    # Inner progress bar for rows in this batch
    for i, (_, row) in enumerate(tqdm(batch.iterrows(), total=len(batch),
                                      desc=f"ðŸ“¦ Batch {batch_num + 1}/{num_batches}", 
                                      leave=False, ncols=100)):
        cid = row["cid"]
        for col in char_cols:
            text = row[col]
            if pd.isna(text):
                continue
            text = str(text).strip()
            if len(text) < 5:
                continue

            results = analyzer.analyze(
                text=text,
                language="en",
                entities=["PERSON"]
            )

            for res in results:
                findings.append({
                    "CID": cid,
                    "Column": col,
                    "Text": text,
                    "Entity": res.entity_type,
                    "Matched Text": text[res.start:res.end],
                    "Score": res.score
                })

# Output results
findings_df = pd.DataFrame(findings)
print("âœ… Done. Total findings:", len(findings_df))

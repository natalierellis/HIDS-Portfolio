pip install presidio-analyzer transformers torch

from presidio_analyzer import AnalyzerEngine, RecognizerRegistry
from presidio_analyzer.nlp_engine import NlpEngineProvider
from presidio_analyzer.predefined_recognizers import TransformersRecognizer

# Step 1: Create a Transformers-based PHI recognizer
transformer_recognizer = TransformersRecognizer(
    model_path="obi/deid_roberta_i2b2",  # PHI-trained model
    supported_entities=None  # Use default PHI mappings
)
transformer_recognizer.load_transformer()

# Step 2: Create a fresh recognizer registry and add only the transformer-based recognizer
registry = RecognizerRegistry()
registry.add_recognizer(transformer_recognizer)

# Step 3: Use a minimal spaCy model only for tokenization (not for NER)
import spacy
try:
    spacy.load("en_core_web_sm")
except OSError:
    import spacy.cli
    spacy.cli.download("en_core_web_sm")

nlp_configuration = {
    "nlp_engine_name": "spacy",
    "models": [{"lang_code": "en", "model_name": "en_core_web_sm"}],
}
nlp_engine = NlpEngineProvider(nlp_configuration=nlp_configuration).create_engine()

# Step 4: Initialize AnalyzerEngine with transformer recognizer
analyzer = AnalyzerEngine(
    registry=registry,
    nlp_engine=nlp_engine,
    supported_languages=["en"]
)

# Step 5: Test the setup on a sample clinical sentence
sample_text = "Patient John Doe was admitted to New York Hospital on 05/14/2020 with MRN 1234567."

results = analyzer.analyze(text=sample_text, language="en")

# Step 6: Print detected PHI entities
for r in results:
    print(f"Entity: {r.entity_type}, Text: '{sample_text[r.start:r.end]}', Score: {round(r.score, 2)}")

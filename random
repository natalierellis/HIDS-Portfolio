# %%
# Step 1: Load the raw CSV with variables


# %%
raw.shape

# %% [markdown]
# Step 2: Make all of the flags
# 
# Set up: looking at first column, it is a violation if at least one of the following is true: 
# 

# %%

#tdan_dx_grp: check Cervical CA
def tdan_dx_grp_cervical_ca(raw):
    #tdan_dx_grp = 3 = Cervical CA
    #site_p, p2, p3 = 3 = Cervical 
    # Rule violation mask
    violation = (
            (raw['tdan_dx_grp'] == 3) & (
                (raw['site_p'] != 3) |
                ((raw['site_p2'].notna()) & (raw['site_p2'] != 3)) |
                ((raw['site_p3'].notna()) & (raw['site_p3'] != 3))
            )
        )

        # Get rows that violate the rule
    violations = raw[violation]
    return violations

#if we used &, then it is only a violation if all three rows are wrong -> need to check each one independently 

#The | (OR) between these conditions means any one of them being met is enough to flag the row as a violation

# %%

# tdan_dx_grp: concurrent GynCA and NonGynCA
#tdan_dx_grp = 13 = concurrent gynca and nongynca
#site_p = gyn cancers = 1, Ovarian | 2, Uterine Corpus | 3, Cervical | 4, Fallopian Tube | 4.5, Tubo-Ovarian | 5, Primary Peritoneal | 10, Mullerian origin NOS Unk GYN Site | 6, Vaginal | 7, Vulvar
#site_p2,p3 = 8 = Non-GYN Site
def tdan_dx_grp_concurrentgyncca_nongynca(raw):
    violation_mask = (
        (raw['tdan_dx_grp'] == 13) & (
            (~raw['site_p'].isin({1, 2, 3, 4, 4.5, 5, 6, 7, 10})) |
            (~(raw['site_p2'].isin([8]) | raw['site_p2'].isna())) |
            (~(raw['site_p3'].isin([8]) | raw['site_p3'].isna()))
        )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return violations

#Expected site pattern: site_p should be a gyn site (values in {1, 2, 3, 4, 4.5, 5, 6, 7, 10}), site_p2 and site_p3 should be other(value 8) or missing

# %%
# tdan_dx_grp: concurrent GynCAs
# allowed = GYN sites
# site_p = 11 = concurrent GYN Sites
def tdan_dx_grp_concurrent_gyncas(raw):
    try:
        allowed = {1, 2, 3, 4, 4.5, 5, 6, 7, 10}

        def is_invalid_group_8(row):
            if row['site_p'] == 11:
                return False
            if row['site_p'] not in allowed:
                return True
            if row['site_p2'] not in allowed or row['site_p2'] == row['site_p']:
                return True
            if pd.notna(row['site_p3']):
                if (
                    row['site_p3'] not in allowed or 
                    row['site_p3'] == row['site_p'] or 
                    row['site_p3'] == row['site_p2']
                ):
                    return True
            return False

        mask = (raw['tdan_dx_grp'] == 8)
        violation_mask = mask & raw[mask].apply(is_invalid_group_8, axis=1)

        violations = raw[violation_mask]
        return violations

    except KeyError:
        return pd.DataFrame()
    
    #should either be allowed or concurrent, and if allowed, then sites cannot match

# %%
# tdan_dx_grp: concurrent GynCAs
# allowed = GYN sites
# site_p = 11 = concurrent GYN Sites
def tdan_dx_grp_concurrent_gyncas_new(raw):
    try:
        allowed = {1, 2, 3, 4, 4.5, 5, 6, 7, 10}

        def is_invalid_group_8(row):
            if row['site_p'] == 11:
                return False
            if row['site_p'] not in allowed:
                return True
            if row['site_p2'] not in allowed or row['site_p2'] == row['site_p'] or pd.isna(row['site_p2']):
                return True
            if pd.notna(row['site_p3']):
                if (
                    row['site_p3'] not in allowed or 
                    row['site_p3'] == row['site_p'] or 
                    row['site_p3'] == row['site_p2']
                ):
                    return True
            return False

        mask = (raw['tdan_dx_grp'] == 8)
        violation_mask = mask & raw[mask].apply(is_invalid_group_8, axis=1)

        violations = raw[violation_mask]
        return violations

    except KeyError:
        return pd.DataFrame()
    
    #should either be allowed or concurrent, and if allowed, then sites cannot match

# %%

#check mullerian ca in tdan_dx_grp 
# tdan_dx_grp = 6 = mullerian
# site_p = 10 = mullerian
def tdan_dx_grp_mullerian_ca_new(raw): 
    valid_primary_sites = {1,4,4.5,5,10}
    violation_mask = (
    (raw['tdan_dx_grp'] == 6) & (    # ONLY applies to Mullerian cancer cases
        (~raw['site_p'].isin(valid_primary_sites)) |       # site_p must be in the valid set
        ((raw['site_p2'].notna()) & (raw['site_p2'] != raw['site_p'])) | # if site_p2 is filled, it must be valid & equal site_p
        ((raw['site_p3'].notna()) & (raw['site_p3'] != raw['site_p']))  # if site_p3 is filled, it must equal site_p
    )
)

    return raw[violation_mask]


# %%

#check NonGynCA in tdan_dx_grp 
#tdan_dx_grp = 11 = nongynca
# site_p = 8 = non-gyn site
def tdan_dx_grp_nongynca(raw):
    violation_mask = (
        (raw['tdan_dx_grp'] == 11) & (
            (raw['site_p'] != 8) )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return violations

# %%

#check Ovarian CA
#valid = OV, FT, PP, TO
#tdan_dx_grp = 1 = ovarian ca
# site_p = 10 = mullerian
def tdan_dx_grp_ovarian_ca(raw):
    # Rule violation mask
    valid_primary_sites = {1,4,4.5,5}

    #When tdan_dx_grp == 1 and site_p not equal to 10:
    rule1_violation = (
        (raw['tdan_dx_grp'] == 1) &
        (raw['site_p'] != 10) & (
        (~raw['site_p'].isin(valid_primary_sites)) |
        (raw['site_p2'].notna() & (raw['site_p2'] != raw['site_p'])) |
        (raw['site_p3'].notna() & (raw['site_p3'] != raw['site_p']))
        )

    )
    

    # When tdan_dx_grp == 1 and site_p is equal to 10: 
    rule2_violation = (
        (raw['tdan_dx_grp'] == 1) &
        (raw['site_p'] == 10) &
        (raw['site_p2'].notna()) &
        (~raw['site_p2'].isin(valid_primary_sites))
    )



    # Get rows that violate the rule
    violation_mask = rule1_violation | rule2_violation

    violations = raw[violation_mask]
    return(violations)

# %%

#check Ovarian CA
#valid = OV, FT, PP, TO
#tdan_dx_grp = 1 = ovarian ca
# site_p = 10 = mullerian
def tdan_dx_grp_ovarian_ca_new(raw):
    valid_primary_sites = {1, 4, 4.5, 5}

    rule_non_mullerian = (
        (raw['tdan_dx_grp'] == 1) & (
            (raw['site_p'] != 10) & (
                (~raw['site_p'].isin(valid_primary_sites)) |
                (raw['site_p2'].notna() & (raw['site_p2'] != raw['site_p'])) |
                (raw['site_p3'].notna() & (raw['site_p3'] != raw['site_p']))
            )
        )
    )

    rule_mullerian = (
        (raw['tdan_dx_grp'] == 1) &
        (raw['site_p'] == 10) &
        (raw['site_p2'].notna()) &
        (~raw['site_p2'].isin(valid_primary_sites))
    )

    violation_mask = rule_non_mullerian | rule_mullerian
    return raw[violation_mask]

# %%

#check Ovarian LMP in tdan_dx_grp 
# tdan_dx_grp = 10 = ovarian lmp
#site_p = 1 = ovarian
def tdan_dx_grp_ovarian_lmp(raw):

    # Rule violation mask
    violation_mask = (
        (raw['tdan_dx_grp'] == 10) & (
            (raw['site_p'] != 1) |
            ((raw['site_p2'].notna()) & (raw['site_p2'] != 1)) |
            ((raw['site_p3'].notna()) & (raw['site_p3'] != 1))
        )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return(violations)

# %%

#check Prior GynCA in tdan_dx_grp 
#valid = 36, Serous cystadenoma | 37, Mucinous cystadenoma | 38, Leiomyoma | 39, Hyperplasia complex +/- atypia | 40, Hyperplasia simple | 41, Mild dysplasia | 42, Moderate dysplasia | 43, Severe dysplasia | 44, Atypia unspecified | 45, Metaplasia | 46, Papilloma | 47, Polyp | 48, Other benign conditions | 49, Normal tissue
#tdan_dx_grp = 7 = prior gynca
# site_p = 11 = concurrent
# #site_p = 8 =  non-gyn
def tdan_dx_grp_priorgynca(raw):

    valid_celltypes = {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}

    # Rule violation mask
    violation_mask = (
        (raw['tdan_dx_grp'] == 7) & (
            (raw['site_p'].isin([11,8])) | (~raw['celltype_p'].isin(valid_celltypes))
            )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return(violations)

# %%

#check Uterine CA in tdan_dx_grp 
#tdan_dx_grp = site_p= 2 = uterine
def tdan_dx_grp_uterine_ca(raw):
    violation_mask = (
        (raw['tdan_dx_grp'] == 2) & (
            (raw['site_p'] != 2) |
            ((raw['site_p2'].notna()) & (raw['site_p2'] != 2)) |
            ((raw['site_p3'].notna()) & (raw['site_p3'] != 2))
        )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return(violations)

# %%

#check Vaginal CA in tdan_dx_grp 
# tdan_dx_grp = 5= vaginal
# site_p = 6 = vaginal
def tdan_dx_grp_vaginal_ca(raw):
    violation_mask = (
        (raw['tdan_dx_grp'] == 5) & (
            (raw['site_p'] != 6) |
            ((raw['site_p2'].notna()) & (raw['site_p2'] != 6)) |
            ((raw['site_p3'].notna()) & (raw['site_p3'] != 6))
        )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return(violations)

# %%

#check Vulvar CA in tdan_dx_grp 
#tdan_dx_grp = 4 = vular
# site_p = 7 = vulvar
def tdan_dx_grp_vulvar_ca(raw):
    violation_mask = (
        (raw['tdan_dx_grp'] == 4) & (
            (raw['site_p'] != 7) |
            ((raw['site_p2'].notna()) & (raw['site_p2'] != 7)) |
            ((raw['site_p3'].notna()) & (raw['site_p3'] != 7))
        )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return(violations)

# %%

#check BenignDx in tdan_dx_grp 
#tdan_dx_grp = 12 = benign
#valid = 36, Serous cystadenoma | 37, Mucinous cystadenoma | 38, Leiomyoma | 39, Hyperplasia complex +/- atypia | 40, Hyperplasia simple | 41, Mild dysplasia | 42, Moderate dysplasia | 43, Severe dysplasia | 44, Atypia unspecified | 45, Metaplasia | 46, Papilloma | 47, Polyp | 48, Other benign conditions | 49, Normal tissue
#site_p = 11 = concurrent
#site_p = 8 = gyn
def tdan_dx_grp_benigndx(raw):
    valid_celltypes = {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}

    # Rule violation mask
    violation_mask = (
        (raw['tdan_dx_grp'] == 12) & (
            (raw['site_p'].isin([11,8])) | (~raw['celltype_p'].isin(valid_celltypes))
            )
    )

    # Get rows that violate the rule
    violations = raw[violation_mask]

    return(violations)

# %% [markdown]
# #Step 3: Build the QC Engine that appends the violations together. 

# %%
def run_all_qc_flags(df):
    violations = []

    # List of all your flag functions with names
    flag_functions = {
        'tdan_dx_grp_mullerian_ca_new': tdan_dx_grp_mullerian_ca_new,
        'tdan_dx_grp_cervical_ca' : tdan_dx_grp_cervical_ca,
        'tdan_dx_grp_concurrentgyncca_nongynca': tdan_dx_grp_concurrentgyncca_nongynca,
        'tdan_dx_grp_concurrent_gyncas_new': tdan_dx_grp_concurrent_gyncas_new, 
        'tdan_dx_grp_nongynca': tdan_dx_grp_nongynca, 
        'tdan_dx_grp_ovarian_ca_new': tdan_dx_grp_ovarian_ca_new, 
        'tdan_dx_grp_ovarian_lmp': tdan_dx_grp_ovarian_lmp,
        'tdan_dx_grp_priorgynca': tdan_dx_grp_priorgynca, 
        'tdan_dx_grp_uterine_ca': tdan_dx_grp_uterine_ca,
        ' tdan_dx_grp_vaginal_ca':  tdan_dx_grp_vaginal_ca,
        'tdan_dx_grp_vulvar_ca': tdan_dx_grp_vulvar_ca,
        'tdan_dx_grp_benigndx': tdan_dx_grp_benigndx
        # Add more flags here as you define them
    }

    for name, func in flag_functions.items():
        try:
            result = func(df)
            if not result.empty:
                result = result.copy()
                result['violation_flag'] = name
                violations.append(result)
        except KeyError:
            # Skip flag if required columns are missing
            continue

    if violations:
        return pd.concat(violations, ignore_index=True)
    else:
        print("✅ No violations found.")
        return pd.DataFrame()


